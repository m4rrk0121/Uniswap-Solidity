// SPDX-License-Identifier: MIT
pragma solidity =0.7.6;
pragma abicoder v2;

import "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol";
import "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol";

import {IERC20, SafeERC20} from "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4-solc-0.7/contracts/token/ERC20/SafeERC20.sol";

interface IUniswapRouter is ISwapRouter {
    function refundETH() external payable;
}

interface IUniswapV2Router02 {
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
}

contract MultiTrade {
      
  // SushiSwap
    IUniswapV2Router02 private constant UniRouter = IUniswapV2Router02(0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24);
    address private constant CHIDO = 0xF31e6D62BFC485857af2186eB3d8ee94b4379feD;
    address private constant WETH = 0x4200000000000000000000000000000000000006;
    IERC20 private weth = IERC20(WETH);
    IERC20 private chido = IERC20(CHIDO);
 
  
function _tradeOnV2(uint256 amountIn) private {
    
    weth.transferFrom(msg.sender, address(this), amountIn);
    weth.approve(address(UniRouter), amountIn);

    address[] memory path = new address[](2);
    path[0] = WETH;
    path[1] = CHIDO;
    uint256 amountOutMin = 0;


      
    UniRouter.swapExactTokensForTokens(
        amountIn,
        amountOutMin,
        path,
        msg.sender,
        block.timestamp
    );
}

function multiSwap(uint256 amountin) external payable {
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
    _tradeOnV2(amountin);
}

}
